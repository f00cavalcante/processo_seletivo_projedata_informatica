import Funcionarios.FuncionariosAgrupadosPorFuncao;
import Funcionarios.FuncionariosESeusSalarios;
import Funcionarios.FuncionariosIdadeDoFuncionario;
import Funcionarios.FuncionariosRelacao;
import Funcionarios.FuncionariosRemoverFuncionario;

import org.json.JSONException;

import java.io.FileNotFoundException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class Principal {

     public static void main(String[] args) throws FileNotFoundException, JSONException, ParseException {

          HashMap<String, Map<String, Object>> funcionarios = new HashMap<>();

          System.out.println("OlÃ¡ Mundo!");
          System.out.println("Para dar sorte. ðŸ™‚");

          System.out.println("\nAbaixo, encontram-se as respostas para o teste prÃ¡tico Ã  vaga de Desenvolvedor oferecida pela Projedata InformÃ¡tica. Cada resposta estarÃ¡ identificada conforme o enunciado das questÃµes, sendo trÃªs (3) ao todo.\n");

          // QuestÃ£o 01 - CriaÃ§Ã£o da Classe Pessoas
          System.out.println("QuestÃ£o 01 - Criar uma Class com o nome Pessoas, e esta, deverÃ¡ receber os atributos 'nome' e data de nascimento'.");
          System.out.println("Para este processo, optei por efetuar a criaÃ§Ã£o de uma Classe com o nome especificado, e mÃ©todos para inserir nome e data de nascimento aos novos objetos criados a partir dela, isto Ã©, as novas pessoas, assim, com o mÃ©todo 'set' os dados poderÃ£o ser inseridos, e 'get', consultados.\n\n");

          // QuestÃ£o 02 - CriaÃ§Ã£o da Classe Funcionario estendida da Classe Pessoas
          System.out.println("QuestÃ£o 02 - Criar uma Classe Funcionario, estendida da Classe Pessoas, com os atributos 'salario' e algo mais que nÃ£o recordo.");
          System.out.println("Seguindo o mesmo princÃ­pio, foi criada a Classe Funcionarios, sendo uma estenÃ§Ã£o da Classe Pessoas, com mÃ©todos para inserir valores, e tambÃ©m os consultar.");
          System.out.println("EntÃ£o, para demonstraÃ§Ã£o, abaixo segue o conteÃºdo do dicionÃ¡rio criado, tendo como chave (keys) o nome de cada funcionÃ¡rio:");

          funcionarios = new FuncionariosRelacao().getFuncionariosRelacao();

          funcionarios.forEach(
                    (funcionario, dadosDoFuncionario)
                              ->
                              System.out.printf("Nome: %s | Data Nascimento: %s, SalÃ¡rio: %s, FunÃ§Ã£o: %s \n", funcionario, dadosDoFuncionario.get("Data Nascimento"), dadosDoFuncionario.get("SalÃ¡rio"), dadosDoFuncionario.get("FunÃ§Ã£o"))
          );

          System.out.println("\n");

          // QuestÃ£o 03 - A partir deste ponto, serÃ¡ tratado a resoluÃ§Ã£o da questÃ£o 03, e as suas subquestÃµes. Desta forma, apÃ³s, haverÃ¡ a revisÃ£o do processo ao ser reenviado para avaliaÃ§Ã£o da empresa.
          System.out.println("QuestÃ£o 03");
          System.out.println("A seguir, todas as execuÃ§Ãµes relacionadas Ã s opÃ§Ãµes para a questÃ£o 03, e suas opÃ§Ãµes.");

          System.out.println("Removendo funcionÃ¡rio.");
          System.out.println("Executando o processo de remoÃ§Ã£o do funcionÃ¡rio. Neste caso, serÃ¡ efetuado a remoÃ§Ã£o do 'JoÃ£o' conforme solicitado. Optei por, criar uma funÃ§Ã£o separada, a qual, retornarÃ¡ o dicionÃ¡rio com a chave (key) relacionada a este colaborador excluÃ­da, e com isto, a variÃ¡vel 'funcionarios' receberÃ¡ um novo HashMap().");
          System.out.println("A nova relaÃ§Ã£o dos funcionÃ¡rios:");
          // Neste processo, optei por efetuar a criaÃ§Ã£o de um Objeto separado para retornar a lista com a remoÃ§Ã£o do funcionÃ¡rio determinado, apenas para melhor organizaÃ§Ã£o do cÃ³digo, nÃ£o poluindo o main executando processos
          funcionarios = new FuncionariosRemoverFuncionario().FuncionariosRemoverFuncionario(funcionarios, "JoÃ£o");
          funcionarios.forEach(
                    (funcionario, dadosDoFuncionario)
                              ->
                              System.out.printf("Nome: %s | Data Nascimento: %s, SalÃ¡rio: %s, FunÃ§Ã£o: %s \n", funcionario, dadosDoFuncionario.get("Data Nascimento"), dadosDoFuncionario.get("SalÃ¡rio"), dadosDoFuncionario.get("FunÃ§Ã£o"))
          );
          System.out.print("\n");
          System.out.println("AtualizaÃ§Ã£o salarial");
          System.out.println("O processo de atualizaÃ§Ã£o salarial consistiu basicamente em efetuar a criaÃ§Ã£o de um novo BigDecimal, e atualizar todos os valores das chaves contidas no HashMap. Aproveitei a oportunidade, para que a prÃ³rpia funÃ§Ã£o retorne os valores antigos e atualizados, conforme cada interaÃ§Ã£o do loop ocorre. Posteriormente, ocorre a soma total dos salÃ¡rios.");
          FuncionariosESeusSalarios atualizacaoSalarialDosFuncionarios = new FuncionariosESeusSalarios(funcionarios, 1.10);
          funcionarios = atualizacaoSalarialDosFuncionarios.getFuncionariosComAumentoSalarial();
          System.out.printf(
                    "Desta forma, a soma total dos salÃ¡rios ocorrerÃ¡ por meio da execuÃ§Ã£o de uma funÃ§Ã£o, alimentando a variÃ¡vel especÃ­fica para isto. \n" +
                              "Optei entÃ£o, por efetuar sua invocaÃ§Ã£o direta neste prinf, uma vez que o intuito seria apenas apontar a soma dos valores. Assim, o total dos salÃ¡rios Ã©: %s. \n",
                    NumberFormat.getNumberInstance(new Locale("pt", "BR")).format(atualizacaoSalarialDosFuncionarios.getSomaDosSalarios())
          );

          System.out.print("\n");
          System.out.println("Agrupamento por funÃ§Ã£o");

          new FuncionariosAgrupadosPorFuncao().FuncionariosAgrupadosPorFuncao(funcionarios);

          System.out.print("\n");
          System.out.println("Idade dos funcionÃ¡rios");

          FuncionariosIdadeDoFuncionario idadeDosFuncionarios = new FuncionariosIdadeDoFuncionario(funcionarios);

          idadeDosFuncionarios.getIdadeDosFuncionarios().forEach((nomeFuncionario, idadeFuncionario) -> System.out.printf("Nome: %s | Idade: %s \n", nomeFuncionario, idadeFuncionario.toString()));
          System.out.printf("O funcionÃ¡rio mais velho: %s. \n", idadeDosFuncionarios.getFuncionarioMaisVelho());

          idadeDosFuncionarios.setListaDosMesesDeNascimento(List.of(10, 12));
          System.out.print("Retornando o nome dos funcionÃ¡rios que nasceram nos meses de Outubro e Dezembro: ");
          idadeDosFuncionarios.getListaDosMesesDeNascimento().forEach(nomeDoFuncionario -> System.out.printf("%s | ", nomeDoFuncionario));
     }
}