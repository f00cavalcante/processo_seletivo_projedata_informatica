import Funcionarios.FuncionariosAgrupadosPorFuncao;
import Funcionarios.FuncionariosESeusSalarios;
import Funcionarios.FuncionariosExibirInformacoesFormatadas;
import Funcionarios.FuncionariosIdadeDoFuncionario;
import Funcionarios.FuncionariosRelacao;
import Funcionarios.FuncionariosRemoverFuncionario;

import org.json.JSONException;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.io.FileNotFoundException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.*;

public class Principal {

     public static void main(String[] args) throws FileNotFoundException, JSONException, ParseException {

          HashMap<String, Map<String, Object>> funcionarios = new HashMap<>();

          System.out.println("Ol√° Mundo!");
          System.out.println("Para dar sorte. üôÇ");

          System.out.println("\nAbaixo, encontram-se as respostas para o teste pr√°tico √† vaga de Desenvolvedor oferecida pela Projedata Inform√°tica. Cada resposta estar√° identificada conforme o enunciado das quest√µes, sendo tr√™s (3) ao todo.\n");

          // Quest√£o 01 - Cria√ß√£o da Classe Pessoas
          System.out.println("Quest√£o 01 - Criar uma Class com o nome Pessoas, e esta, dever√° receber os atributos 'nome' e data de nascimento'.");
          System.out.println("Para este processo, optei por efetuar a cria√ß√£o de uma Classe com o nome especificado, e m√©todos para inserir nome e data de nascimento aos novos objetos criados a partir dela, isto √©, as novas pessoas, assim, com o m√©todo 'set' os dados poder√£o ser inseridos, e 'get', consultados.\n\n");

          // Quest√£o 02 - Cria√ß√£o da Classe Funcionario estendida da Classe Pessoas
          System.out.println("Quest√£o 02 - Criar uma Classe Funcionario, estendida da Classe Pessoas, com os atributos 'salario' e algo mais que n√£o recordo.");
          System.out.println("Seguindo o mesmo princ√≠pio, foi criada a Classe Funcionarios, sendo uma esten√ß√£o da Classe Pessoas, com m√©todos para inserir valores, e tamb√©m os consultar.");
          System.out.println("Ent√£o, para demonstra√ß√£o, abaixo segue o conte√∫do do dicion√°rio criado, tendo como chave (keys) o nome de cada funcion√°rio:");

          funcionarios = new FuncionariosRelacao().getFuncionariosRelacao();

          funcionarios.forEach(
                    (funcionario, dadosDoFuncionario)
                              ->
                              System.out.printf("Nome: %s | Data Nascimento: %s, Sal√°rio: %s, Fun√ß√£o: %s \n", funcionario, dadosDoFuncionario.get("Data Nascimento"), dadosDoFuncionario.get("Sal√°rio"), dadosDoFuncionario.get("Fun√ß√£o"))
          );

          System.out.println("\n");

          // Quest√£o 03 - A partir deste ponto, ser√° tratado a resolu√ß√£o da quest√£o 03, e as suas subquest√µes. Desta forma, ap√≥s, haver√° a revis√£o do processo ao ser reenviado para avalia√ß√£o da empresa.
          System.out.println("Quest√£o 03");
          System.out.println("Nesta terceira etapa, as execu√ß√µes ser√£o realizadas na classe Principal, relacionadas √† manipula√ß√£o nos dados dos Funcion√°rios criados no dicion√°rio 'funcionarios'.");
          System.out.println("A seguir, todas as execu√ß√µes relacionadas √†s op√ß√µes para a quest√£o 03, e suas op√ß√µes.");

          System.out.print("\n");
          System.out.println("3.1 - Inserir os funcion√°rios na mesma ordem que s√£o apresentados na tabela.");
          System.out.println("Desta forma, optei por utilizar a cria√ß√£o do HashMap utilizando o LinkedHashMap. A apresenta√ß√£o ocorreu, conforme demonstrado anteriormente.");

          System.out.print("\n");
          System.out.println("3.2 - Remover o funcion√°rio Jo√£o.");
          System.out.println("Executando o processo de remo√ß√£o do funcion√°rio. Neste caso, ser√° efetuado a remo√ß√£o do 'Jo√£o' conforme solicitado. Optei por, criar uma fun√ß√£o separada, a qual, retornar√° o dicion√°rio com a chave (key) relacionada a este colaborador exclu√≠da, e com isto, a vari√°vel 'funcionarios' receber√° um novo HashMap().");
          System.out.println("A nova rela√ß√£o dos funcion√°rios:");
          // Neste processo, optei por efetuar a cria√ß√£o de um Objeto separado para retornar a lista com a remo√ß√£o do funcion√°rio determinado, apenas para melhor organiza√ß√£o do c√≥digo, n√£o poluindo o main executando processos
          funcionarios = new FuncionariosRemoverFuncionario().FuncionariosRemoverFuncionario(funcionarios, "Jo√£o");
          funcionarios.forEach(
                    (funcionario, dadosDoFuncionario)
                              ->
                              System.out.printf("Nome: %s | Data Nascimento: %s, Sal√°rio: %s, Fun√ß√£o: %s \n", funcionario, dadosDoFuncionario.get("Data Nascimento"), dadosDoFuncionario.get("Sal√°rio"), dadosDoFuncionario.get("Fun√ß√£o"))
          );

          System.out.print("\n");
          System.out.println("3.3 - Efetuar a apresenta√ß√£o das informa√ß√µes dos funcion√°rios de maneira formatada.");
          System.out.println("Pois muito bem... Neste processo optei por efetuar a cria√ß√£o de uma classe, para melhor organizar o c√≥digo, e destinar a execu√ß√£o desta Princiapl apenas para texto e invocar as fun√ß√µes. " +
                    "\nAssim, crio um novo m√©todo, enviando o dicion√°rio 'funcion√°rios', o qual ir√° imprimir apenas o nome, data e sal√°rios formatados, no padr√£o estabelecido. Para data, opotei por algo bastante verboso." +
                    "\nSegue:");
          new FuncionariosExibirInformacoesFormatadas(funcionarios);

          System.out.print("\n");
          System.out.println("3.4 - Atualiza√ß√£o salarial em 10%");
          System.out.println(
                    "O processo de atualiza√ß√£o salarial consistiu basicamente em efetuar a cria√ß√£o de um novo BigDecimal, e reenviar todos os valores das chaves contidas no HashMap. " +
                              "\nAproveitei a oportunidade, para que a pr√≥rpia fun√ß√£o retorne os valores antigos e atualizados, conforme cada intera√ß√£o do loop ocorre. Posteriormente, ocorre a soma total dos sal√°rios."
          );

          FuncionariosESeusSalarios atualizacaoSalarialDosFuncionarios = new FuncionariosESeusSalarios(funcionarios, 1.10);
          funcionarios = atualizacaoSalarialDosFuncionarios.getFuncionariosComAumentoSalarial();

          System.out.print("\n");
          System.out.printf(
                    "Desta forma, a soma total dos sal√°rios ocorrer√° por meio da execu√ß√£o de uma fun√ß√£o, alimentando a vari√°vel espec√≠fica para isto. \n" +
                              "Optei ent√£o, por efetuar sua invoca√ß√£o direta neste prinf, uma vez que o intuito seria apenas apontar a soma dos valores. Assim, o total dos sal√°rios √©: %s. \n",
                    NumberFormat.getNumberInstance(new Locale("pt", "BR")).format(atualizacaoSalarialDosFuncionarios.getSomaDosSalarios())
          );

          System.out.print("\n");
          System.out.println("3.5 & 3.6 - Agrupamento por fun√ß√£o, e exibir a lista dos funcion√°rios");
          System.out.println(
                    "Para efetuar esta quest√£o, optei por percorrer todo o dicion√°rio dos funcion√°rios, extraindo o nome das fun√ß√µes, e criando uma listagem, garantindo que os dados n√£o sejam repetidos. \n" +
                              "Ap√≥s, para cada √≠ndice da nova lista de fun√ß√µes, percorria o dicion√°rio, validando quais funcion√°rios correspondiam aos dados, e assim, foi criado um Map, com a key sendo os nomes das fun√ß√µes, e a chave, a listagem dos funcion√°rios"
          );

          FuncionariosAgrupadosPorFuncao funcionariosAgrupadosPorFuncao = new FuncionariosAgrupadosPorFuncao(funcionarios);

          System.out.print("\n");
          System.out.println("3.8 - Funcion√°rios com nascimento nos meses 10 e 12");

          FuncionariosIdadeDoFuncionario idadeDosFuncionarios = new FuncionariosIdadeDoFuncionario(funcionarios);

          System.out.println("Uma vez solicitado para validar os funcion√°rios com nascimento nestes meses, e o exerc√≠cio posterior ser√° para validar o funcion√°rio mais velho, criei uma classe para tratar todos os assuntos relacionados √† idade.");
          System.out.println("Neste caso, basicamente, extra√≠ o m√™s correspondente da data de nascimento dos funcin√°rios (em valor), e validei no processo.");

          idadeDosFuncionarios.setListaDosMesesDeNascimento(List.of(10, 12));
          System.out.print("Retornando o nome dos funcion√°rios que nasceram nos meses de Outubro e Dezembro: ");
          idadeDosFuncionarios.getListaDosMesesDeNascimento().forEach(nomeDoFuncionario -> System.out.printf("%s | ", nomeDoFuncionario));

          System.out.print("\n");
          System.out.print("\n");
          System.out.println("3.9 - Funcion√°rio mais velho");
          System.out.println("Em complemento ao exerc√≠cio anterior, para a mesma classe, efetuei a apura√ß√£o de todos estes dados, e a idade dos funcion√°rios.");

          idadeDosFuncionarios.getIdadeDosFuncionarios().forEach((nomeFuncionario, idadeFuncionario) -> System.out.printf("Nome: %s | Idade: %s \n", nomeFuncionario, idadeFuncionario.toString()));
          System.out.print("\n");
          System.out.printf("Desta forma, √© poss√≠vel validar que o funcion√°rio mais velho refere-se ao %s, pois possui %s anos de idade. \n", idadeDosFuncionarios.getFuncionarioMaisVelho(), idadeDosFuncionarios.getIdadeDosFuncionarios().get(idadeDosFuncionarios.getFuncionarioMaisVelho()));

          System.out.print("\n");
          System.out.println("3.10 - Exibir a lista dos nomes em ordem alfab√©tica");
          System.out.println("Para este processo, optei por apenas efetuar a invoca√ß√£o dos m√©todos que s√£o acess√≠veis para a extra√ß√£o das chaves (keys) do dicion√°rio dos funcion√°rios, exib√≠-los, ordernar pelo m√©todo sorted, e criar uma intera√ß√£o com forEach.");
          funcionarios.keySet().stream().sorted().forEach(nomeDoFuncionario -> System.out.printf("%s | ", nomeDoFuncionario));

          System.out.print("\n");
          System.out.println("3.11 - Exibir a soma total dos sal√°rios dos funcion√°rios");
          System.out.println("Uma vez que concentrei todas as informa√ß√µes relacionadas aos sal√°rios na classe FuncionariosESeusSalarios, basta executar seu m√©todo getSomaDosSalarios");
          System.out.printf("Desta forma, a soma dos sal√°rios √© R$ %s. \n", NumberFormat.getNumberInstance(new Locale("pt", "BR")).format(atualizacaoSalarialDosFuncionarios.getSomaDosSalarios()));

          System.out.print("\n");
          System.out.println("3.12 - Exibir a quantidade de sal√°rios m√≠nimos por funcion√°rios");
          System.out.println(
                    "Para exibir esta quantidade, no exerc√≠cio foi passado que o valor do sal√°rio m√≠nimo a ser considerado ser√° de 1212. \n" +
                              "Desta forma, na classe relacionada ao tratamento dos sal√°rios dos funcion√°rios, apenas foi invocado este m√©todo, e inserido o valor correspondente ao sal√°rio m√≠nimo estipulado"
          );

          atualizacaoSalarialDosFuncionarios.setValorSalarioMinimo(new BigDecimal(1212));
          atualizacaoSalarialDosFuncionarios.getfuncionariosComMediasDeSalarioMinimo().forEach(
                    (nomeDoFuncionario, mediaSalarioMinimo)
                              -> System.out.printf("Nome: %s | M√©dia Sal√°rio M√≠nimo: %s \n", nomeDoFuncionario, mediaSalarioMinimo)
          );

          System.out.println("\n");
          System.out.println("E com isto, chegamos ao final de todo o teste pr√°tico. =)");
     }
}